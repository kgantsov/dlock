// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.28.1
// source: internal/proto/lock.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AcquireReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Owner         string                 `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Ttl           int64                  `protobuf:"varint,3,opt,name=ttl,proto3" json:"ttl,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AcquireReq) Reset() {
	*x = AcquireReq{}
	mi := &file_internal_proto_lock_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AcquireReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcquireReq) ProtoMessage() {}

func (x *AcquireReq) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_lock_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcquireReq.ProtoReflect.Descriptor instead.
func (*AcquireReq) Descriptor() ([]byte, []int) {
	return file_internal_proto_lock_proto_rawDescGZIP(), []int{0}
}

func (x *AcquireReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *AcquireReq) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *AcquireReq) GetTtl() int64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

type AcquireResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Key           string                 `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Owner         string                 `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`                                    // client ID
	FencingToken  uint64                 `protobuf:"varint,5,opt,name=fencing_token,json=fencingToken,proto3" json:"fencing_token,omitempty"` // monotonically increasing
	ExpireAt      int64                  `protobuf:"varint,6,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`
	ExpiresIn     int64                  `protobuf:"varint,7,opt,name=expires_in,json=expiresIn,proto3" json:"expires_in,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AcquireResp) Reset() {
	*x = AcquireResp{}
	mi := &file_internal_proto_lock_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AcquireResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcquireResp) ProtoMessage() {}

func (x *AcquireResp) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_lock_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcquireResp.ProtoReflect.Descriptor instead.
func (*AcquireResp) Descriptor() ([]byte, []int) {
	return file_internal_proto_lock_proto_rawDescGZIP(), []int{1}
}

func (x *AcquireResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AcquireResp) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *AcquireResp) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *AcquireResp) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *AcquireResp) GetFencingToken() uint64 {
	if x != nil {
		return x.FencingToken
	}
	return 0
}

func (x *AcquireResp) GetExpireAt() int64 {
	if x != nil {
		return x.ExpireAt
	}
	return 0
}

func (x *AcquireResp) GetExpiresIn() int64 {
	if x != nil {
		return x.ExpiresIn
	}
	return 0
}

type ReleaseReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Owner         string                 `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`                                    // Owner must match the current lock owner
	FencingToken  uint64                 `protobuf:"varint,3,opt,name=fencing_token,json=fencingToken,proto3" json:"fencing_token,omitempty"` // optional safeguard
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReleaseReq) Reset() {
	*x = ReleaseReq{}
	mi := &file_internal_proto_lock_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReleaseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseReq) ProtoMessage() {}

func (x *ReleaseReq) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_lock_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseReq.ProtoReflect.Descriptor instead.
func (*ReleaseReq) Descriptor() ([]byte, []int) {
	return file_internal_proto_lock_proto_rawDescGZIP(), []int{2}
}

func (x *ReleaseReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ReleaseReq) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *ReleaseReq) GetFencingToken() uint64 {
	if x != nil {
		return x.FencingToken
	}
	return 0
}

type ReleaseResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReleaseResp) Reset() {
	*x = ReleaseResp{}
	mi := &file_internal_proto_lock_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReleaseResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseResp) ProtoMessage() {}

func (x *ReleaseResp) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_lock_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseResp.ProtoReflect.Descriptor instead.
func (*ReleaseResp) Descriptor() ([]byte, []int) {
	return file_internal_proto_lock_proto_rawDescGZIP(), []int{3}
}

func (x *ReleaseResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ReleaseResp) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type RenewReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Owner         string                 `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`                                    // Owner must match the current lock owner
	FencingToken  uint64                 `protobuf:"varint,3,opt,name=fencing_token,json=fencingToken,proto3" json:"fencing_token,omitempty"` // optional safeguard
	Ttl           int64                  `protobuf:"varint,4,opt,name=ttl,proto3" json:"ttl,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RenewReq) Reset() {
	*x = RenewReq{}
	mi := &file_internal_proto_lock_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RenewReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenewReq) ProtoMessage() {}

func (x *RenewReq) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_lock_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenewReq.ProtoReflect.Descriptor instead.
func (*RenewReq) Descriptor() ([]byte, []int) {
	return file_internal_proto_lock_proto_rawDescGZIP(), []int{4}
}

func (x *RenewReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *RenewReq) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *RenewReq) GetFencingToken() uint64 {
	if x != nil {
		return x.FencingToken
	}
	return 0
}

func (x *RenewReq) GetTtl() int64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

type RenewResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Key           string                 `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Owner         string                 `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`                                    // Owner must match the current lock owner
	FencingToken  uint64                 `protobuf:"varint,5,opt,name=fencing_token,json=fencingToken,proto3" json:"fencing_token,omitempty"` // optional safeguard
	ExpireAt      int64                  `protobuf:"varint,6,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`
	ExpiresIn     int64                  `protobuf:"varint,7,opt,name=expires_in,json=expiresIn,proto3" json:"expires_in,omitempty"` // Time in seconds until the lock expires
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RenewResp) Reset() {
	*x = RenewResp{}
	mi := &file_internal_proto_lock_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RenewResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenewResp) ProtoMessage() {}

func (x *RenewResp) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_lock_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenewResp.ProtoReflect.Descriptor instead.
func (*RenewResp) Descriptor() ([]byte, []int) {
	return file_internal_proto_lock_proto_rawDescGZIP(), []int{5}
}

func (x *RenewResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RenewResp) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *RenewResp) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *RenewResp) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *RenewResp) GetFencingToken() uint64 {
	if x != nil {
		return x.FencingToken
	}
	return 0
}

func (x *RenewResp) GetExpireAt() int64 {
	if x != nil {
		return x.ExpireAt
	}
	return 0
}

func (x *RenewResp) GetExpiresIn() int64 {
	if x != nil {
		return x.ExpiresIn
	}
	return 0
}

type LeaderChangeConfRaftCommand struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeId        string                 `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	RaftAddr      string                 `protobuf:"bytes,2,opt,name=raft_addr,json=raftAddr,proto3" json:"raft_addr,omitempty"`
	GrpcAddr      string                 `protobuf:"bytes,3,opt,name=grpc_addr,json=grpcAddr,proto3" json:"grpc_addr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LeaderChangeConfRaftCommand) Reset() {
	*x = LeaderChangeConfRaftCommand{}
	mi := &file_internal_proto_lock_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaderChangeConfRaftCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderChangeConfRaftCommand) ProtoMessage() {}

func (x *LeaderChangeConfRaftCommand) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_lock_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderChangeConfRaftCommand.ProtoReflect.Descriptor instead.
func (*LeaderChangeConfRaftCommand) Descriptor() ([]byte, []int) {
	return file_internal_proto_lock_proto_rawDescGZIP(), []int{6}
}

func (x *LeaderChangeConfRaftCommand) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *LeaderChangeConfRaftCommand) GetRaftAddr() string {
	if x != nil {
		return x.RaftAddr
	}
	return ""
}

func (x *LeaderChangeConfRaftCommand) GetGrpcAddr() string {
	if x != nil {
		return x.GrpcAddr
	}
	return ""
}

type AcquireRaftCommand struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Owner         string                 `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	FencingToken  uint64                 `protobuf:"varint,3,opt,name=fencing_token,json=fencingToken,proto3" json:"fencing_token,omitempty"` // optional safeguard
	ExpireAt      int64                  `protobuf:"varint,4,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AcquireRaftCommand) Reset() {
	*x = AcquireRaftCommand{}
	mi := &file_internal_proto_lock_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AcquireRaftCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcquireRaftCommand) ProtoMessage() {}

func (x *AcquireRaftCommand) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_lock_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcquireRaftCommand.ProtoReflect.Descriptor instead.
func (*AcquireRaftCommand) Descriptor() ([]byte, []int) {
	return file_internal_proto_lock_proto_rawDescGZIP(), []int{7}
}

func (x *AcquireRaftCommand) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *AcquireRaftCommand) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *AcquireRaftCommand) GetFencingToken() uint64 {
	if x != nil {
		return x.FencingToken
	}
	return 0
}

func (x *AcquireRaftCommand) GetExpireAt() int64 {
	if x != nil {
		return x.ExpireAt
	}
	return 0
}

type ReleaseRaftCommand struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Owner         string                 `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	FencingToken  uint64                 `protobuf:"varint,3,opt,name=fencing_token,json=fencingToken,proto3" json:"fencing_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReleaseRaftCommand) Reset() {
	*x = ReleaseRaftCommand{}
	mi := &file_internal_proto_lock_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReleaseRaftCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseRaftCommand) ProtoMessage() {}

func (x *ReleaseRaftCommand) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_lock_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseRaftCommand.ProtoReflect.Descriptor instead.
func (*ReleaseRaftCommand) Descriptor() ([]byte, []int) {
	return file_internal_proto_lock_proto_rawDescGZIP(), []int{8}
}

func (x *ReleaseRaftCommand) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ReleaseRaftCommand) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *ReleaseRaftCommand) GetFencingToken() uint64 {
	if x != nil {
		return x.FencingToken
	}
	return 0
}

type RenewRaftCommand struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Owner         string                 `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	FencingToken  uint64                 `protobuf:"varint,3,opt,name=fencing_token,json=fencingToken,proto3" json:"fencing_token,omitempty"`
	ExpireAt      int64                  `protobuf:"varint,4,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RenewRaftCommand) Reset() {
	*x = RenewRaftCommand{}
	mi := &file_internal_proto_lock_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RenewRaftCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenewRaftCommand) ProtoMessage() {}

func (x *RenewRaftCommand) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_lock_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenewRaftCommand.ProtoReflect.Descriptor instead.
func (*RenewRaftCommand) Descriptor() ([]byte, []int) {
	return file_internal_proto_lock_proto_rawDescGZIP(), []int{9}
}

func (x *RenewRaftCommand) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *RenewRaftCommand) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *RenewRaftCommand) GetFencingToken() uint64 {
	if x != nil {
		return x.FencingToken
	}
	return 0
}

func (x *RenewRaftCommand) GetExpireAt() int64 {
	if x != nil {
		return x.ExpireAt
	}
	return 0
}

type RaftCommand struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Cmd:
	//
	//	*RaftCommand_LeaderChangeConf
	//	*RaftCommand_Acquire
	//	*RaftCommand_Release
	//	*RaftCommand_Renew
	Cmd           isRaftCommand_Cmd `protobuf_oneof:"cmd"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RaftCommand) Reset() {
	*x = RaftCommand{}
	mi := &file_internal_proto_lock_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaftCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftCommand) ProtoMessage() {}

func (x *RaftCommand) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_lock_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftCommand.ProtoReflect.Descriptor instead.
func (*RaftCommand) Descriptor() ([]byte, []int) {
	return file_internal_proto_lock_proto_rawDescGZIP(), []int{10}
}

func (x *RaftCommand) GetCmd() isRaftCommand_Cmd {
	if x != nil {
		return x.Cmd
	}
	return nil
}

func (x *RaftCommand) GetLeaderChangeConf() *LeaderChangeConfRaftCommand {
	if x != nil {
		if x, ok := x.Cmd.(*RaftCommand_LeaderChangeConf); ok {
			return x.LeaderChangeConf
		}
	}
	return nil
}

func (x *RaftCommand) GetAcquire() *AcquireRaftCommand {
	if x != nil {
		if x, ok := x.Cmd.(*RaftCommand_Acquire); ok {
			return x.Acquire
		}
	}
	return nil
}

func (x *RaftCommand) GetRelease() *ReleaseRaftCommand {
	if x != nil {
		if x, ok := x.Cmd.(*RaftCommand_Release); ok {
			return x.Release
		}
	}
	return nil
}

func (x *RaftCommand) GetRenew() *RenewRaftCommand {
	if x != nil {
		if x, ok := x.Cmd.(*RaftCommand_Renew); ok {
			return x.Renew
		}
	}
	return nil
}

type isRaftCommand_Cmd interface {
	isRaftCommand_Cmd()
}

type RaftCommand_LeaderChangeConf struct {
	LeaderChangeConf *LeaderChangeConfRaftCommand `protobuf:"bytes,1,opt,name=leader_change_conf,json=leaderChangeConf,proto3,oneof"`
}

type RaftCommand_Acquire struct {
	Acquire *AcquireRaftCommand `protobuf:"bytes,2,opt,name=acquire,proto3,oneof"`
}

type RaftCommand_Release struct {
	Release *ReleaseRaftCommand `protobuf:"bytes,3,opt,name=release,proto3,oneof"`
}

type RaftCommand_Renew struct {
	Renew *RenewRaftCommand `protobuf:"bytes,4,opt,name=renew,proto3,oneof"`
}

func (*RaftCommand_LeaderChangeConf) isRaftCommand_Cmd() {}

func (*RaftCommand_Acquire) isRaftCommand_Cmd() {}

func (*RaftCommand_Release) isRaftCommand_Cmd() {}

func (*RaftCommand_Renew) isRaftCommand_Cmd() {}

type LeaderConfiguration struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeId        string                 `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	RaftAddr      string                 `protobuf:"bytes,2,opt,name=raft_addr,json=raftAddr,proto3" json:"raft_addr,omitempty"`
	GrpcAddr      string                 `protobuf:"bytes,3,opt,name=grpc_addr,json=grpcAddr,proto3" json:"grpc_addr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LeaderConfiguration) Reset() {
	*x = LeaderConfiguration{}
	mi := &file_internal_proto_lock_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaderConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderConfiguration) ProtoMessage() {}

func (x *LeaderConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_lock_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderConfiguration.ProtoReflect.Descriptor instead.
func (*LeaderConfiguration) Descriptor() ([]byte, []int) {
	return file_internal_proto_lock_proto_rawDescGZIP(), []int{11}
}

func (x *LeaderConfiguration) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *LeaderConfiguration) GetRaftAddr() string {
	if x != nil {
		return x.RaftAddr
	}
	return ""
}

func (x *LeaderConfiguration) GetGrpcAddr() string {
	if x != nil {
		return x.GrpcAddr
	}
	return ""
}

type LockEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Owner         string                 `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	FencingToken  uint64                 `protobuf:"varint,3,opt,name=fencing_token,json=fencingToken,proto3" json:"fencing_token,omitempty"`
	ExpireAt      int64                  `protobuf:"varint,4,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LockEntry) Reset() {
	*x = LockEntry{}
	mi := &file_internal_proto_lock_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LockEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockEntry) ProtoMessage() {}

func (x *LockEntry) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_lock_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockEntry.ProtoReflect.Descriptor instead.
func (*LockEntry) Descriptor() ([]byte, []int) {
	return file_internal_proto_lock_proto_rawDescGZIP(), []int{12}
}

func (x *LockEntry) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *LockEntry) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *LockEntry) GetFencingToken() uint64 {
	if x != nil {
		return x.FencingToken
	}
	return 0
}

func (x *LockEntry) GetExpireAt() int64 {
	if x != nil {
		return x.ExpireAt
	}
	return 0
}

type SnapshotItem struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Item:
	//
	//	*SnapshotItem_LeaderConf
	//	*SnapshotItem_Lock
	Item          isSnapshotItem_Item `protobuf_oneof:"item"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SnapshotItem) Reset() {
	*x = SnapshotItem{}
	mi := &file_internal_proto_lock_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SnapshotItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotItem) ProtoMessage() {}

func (x *SnapshotItem) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_lock_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotItem.ProtoReflect.Descriptor instead.
func (*SnapshotItem) Descriptor() ([]byte, []int) {
	return file_internal_proto_lock_proto_rawDescGZIP(), []int{13}
}

func (x *SnapshotItem) GetItem() isSnapshotItem_Item {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *SnapshotItem) GetLeaderConf() *LeaderConfiguration {
	if x != nil {
		if x, ok := x.Item.(*SnapshotItem_LeaderConf); ok {
			return x.LeaderConf
		}
	}
	return nil
}

func (x *SnapshotItem) GetLock() *LockEntry {
	if x != nil {
		if x, ok := x.Item.(*SnapshotItem_Lock); ok {
			return x.Lock
		}
	}
	return nil
}

type isSnapshotItem_Item interface {
	isSnapshotItem_Item()
}

type SnapshotItem_LeaderConf struct {
	LeaderConf *LeaderConfiguration `protobuf:"bytes,1,opt,name=leader_conf,json=leaderConf,proto3,oneof"`
}

type SnapshotItem_Lock struct {
	Lock *LockEntry `protobuf:"bytes,2,opt,name=lock,proto3,oneof"`
}

func (*SnapshotItem_LeaderConf) isSnapshotItem_Item() {}

func (*SnapshotItem_Lock) isSnapshotItem_Item() {}

var File_internal_proto_lock_proto protoreflect.FileDescriptor

const file_internal_proto_lock_proto_rawDesc = "" +
	"\n" +
	"\x19internal/proto/lock.proto\x12\x04lock\"F\n" +
	"\n" +
	"AcquireReq\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05owner\x18\x02 \x01(\tR\x05owner\x12\x10\n" +
	"\x03ttl\x18\x03 \x01(\x03R\x03ttl\"\xc6\x01\n" +
	"\vAcquireResp\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\x12\x10\n" +
	"\x03key\x18\x03 \x01(\tR\x03key\x12\x14\n" +
	"\x05owner\x18\x04 \x01(\tR\x05owner\x12#\n" +
	"\rfencing_token\x18\x05 \x01(\x04R\ffencingToken\x12\x1b\n" +
	"\texpire_at\x18\x06 \x01(\x03R\bexpireAt\x12\x1d\n" +
	"\n" +
	"expires_in\x18\a \x01(\x03R\texpiresIn\"Y\n" +
	"\n" +
	"ReleaseReq\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05owner\x18\x02 \x01(\tR\x05owner\x12#\n" +
	"\rfencing_token\x18\x03 \x01(\x04R\ffencingToken\"=\n" +
	"\vReleaseResp\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\"i\n" +
	"\bRenewReq\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05owner\x18\x02 \x01(\tR\x05owner\x12#\n" +
	"\rfencing_token\x18\x03 \x01(\x04R\ffencingToken\x12\x10\n" +
	"\x03ttl\x18\x04 \x01(\x03R\x03ttl\"\xc4\x01\n" +
	"\tRenewResp\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\x12\x10\n" +
	"\x03key\x18\x03 \x01(\tR\x03key\x12\x14\n" +
	"\x05owner\x18\x04 \x01(\tR\x05owner\x12#\n" +
	"\rfencing_token\x18\x05 \x01(\x04R\ffencingToken\x12\x1b\n" +
	"\texpire_at\x18\x06 \x01(\x03R\bexpireAt\x12\x1d\n" +
	"\n" +
	"expires_in\x18\a \x01(\x03R\texpiresIn\"p\n" +
	"\x1bLeaderChangeConfRaftCommand\x12\x17\n" +
	"\anode_id\x18\x01 \x01(\tR\x06nodeId\x12\x1b\n" +
	"\traft_addr\x18\x02 \x01(\tR\braftAddr\x12\x1b\n" +
	"\tgrpc_addr\x18\x03 \x01(\tR\bgrpcAddr\"~\n" +
	"\x12AcquireRaftCommand\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05owner\x18\x02 \x01(\tR\x05owner\x12#\n" +
	"\rfencing_token\x18\x03 \x01(\x04R\ffencingToken\x12\x1b\n" +
	"\texpire_at\x18\x04 \x01(\x03R\bexpireAt\"a\n" +
	"\x12ReleaseRaftCommand\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05owner\x18\x02 \x01(\tR\x05owner\x12#\n" +
	"\rfencing_token\x18\x03 \x01(\x04R\ffencingToken\"|\n" +
	"\x10RenewRaftCommand\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05owner\x18\x02 \x01(\tR\x05owner\x12#\n" +
	"\rfencing_token\x18\x03 \x01(\x04R\ffencingToken\x12\x1b\n" +
	"\texpire_at\x18\x04 \x01(\x03R\bexpireAt\"\x83\x02\n" +
	"\vRaftCommand\x12Q\n" +
	"\x12leader_change_conf\x18\x01 \x01(\v2!.lock.LeaderChangeConfRaftCommandH\x00R\x10leaderChangeConf\x124\n" +
	"\aacquire\x18\x02 \x01(\v2\x18.lock.AcquireRaftCommandH\x00R\aacquire\x124\n" +
	"\arelease\x18\x03 \x01(\v2\x18.lock.ReleaseRaftCommandH\x00R\arelease\x12.\n" +
	"\x05renew\x18\x04 \x01(\v2\x16.lock.RenewRaftCommandH\x00R\x05renewB\x05\n" +
	"\x03cmd\"h\n" +
	"\x13LeaderConfiguration\x12\x17\n" +
	"\anode_id\x18\x01 \x01(\tR\x06nodeId\x12\x1b\n" +
	"\traft_addr\x18\x02 \x01(\tR\braftAddr\x12\x1b\n" +
	"\tgrpc_addr\x18\x03 \x01(\tR\bgrpcAddr\"u\n" +
	"\tLockEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05owner\x18\x02 \x01(\tR\x05owner\x12#\n" +
	"\rfencing_token\x18\x03 \x01(\x04R\ffencingToken\x12\x1b\n" +
	"\texpire_at\x18\x04 \x01(\x03R\bexpireAt\"{\n" +
	"\fSnapshotItem\x12<\n" +
	"\vleader_conf\x18\x01 \x01(\v2\x19.lock.LeaderConfigurationH\x00R\n" +
	"leaderConf\x12%\n" +
	"\x04lock\x18\x02 \x01(\v2\x0f.lock.LockEntryH\x00R\x04lockB\x06\n" +
	"\x04item2\x97\x01\n" +
	"\vLockService\x12.\n" +
	"\aAcquire\x12\x10.lock.AcquireReq\x1a\x11.lock.AcquireResp\x12.\n" +
	"\aRelease\x12\x10.lock.ReleaseReq\x1a\x11.lock.ReleaseResp\x12(\n" +
	"\x05Renew\x12\x0e.lock.RenewReq\x1a\x0f.lock.RenewRespB0Z.github.com/kgantsov/dlock/internal/proto;protob\x06proto3"

var (
	file_internal_proto_lock_proto_rawDescOnce sync.Once
	file_internal_proto_lock_proto_rawDescData []byte
)

func file_internal_proto_lock_proto_rawDescGZIP() []byte {
	file_internal_proto_lock_proto_rawDescOnce.Do(func() {
		file_internal_proto_lock_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_internal_proto_lock_proto_rawDesc), len(file_internal_proto_lock_proto_rawDesc)))
	})
	return file_internal_proto_lock_proto_rawDescData
}

var file_internal_proto_lock_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_internal_proto_lock_proto_goTypes = []any{
	(*AcquireReq)(nil),                  // 0: lock.AcquireReq
	(*AcquireResp)(nil),                 // 1: lock.AcquireResp
	(*ReleaseReq)(nil),                  // 2: lock.ReleaseReq
	(*ReleaseResp)(nil),                 // 3: lock.ReleaseResp
	(*RenewReq)(nil),                    // 4: lock.RenewReq
	(*RenewResp)(nil),                   // 5: lock.RenewResp
	(*LeaderChangeConfRaftCommand)(nil), // 6: lock.LeaderChangeConfRaftCommand
	(*AcquireRaftCommand)(nil),          // 7: lock.AcquireRaftCommand
	(*ReleaseRaftCommand)(nil),          // 8: lock.ReleaseRaftCommand
	(*RenewRaftCommand)(nil),            // 9: lock.RenewRaftCommand
	(*RaftCommand)(nil),                 // 10: lock.RaftCommand
	(*LeaderConfiguration)(nil),         // 11: lock.LeaderConfiguration
	(*LockEntry)(nil),                   // 12: lock.LockEntry
	(*SnapshotItem)(nil),                // 13: lock.SnapshotItem
}
var file_internal_proto_lock_proto_depIdxs = []int32{
	6,  // 0: lock.RaftCommand.leader_change_conf:type_name -> lock.LeaderChangeConfRaftCommand
	7,  // 1: lock.RaftCommand.acquire:type_name -> lock.AcquireRaftCommand
	8,  // 2: lock.RaftCommand.release:type_name -> lock.ReleaseRaftCommand
	9,  // 3: lock.RaftCommand.renew:type_name -> lock.RenewRaftCommand
	11, // 4: lock.SnapshotItem.leader_conf:type_name -> lock.LeaderConfiguration
	12, // 5: lock.SnapshotItem.lock:type_name -> lock.LockEntry
	0,  // 6: lock.LockService.Acquire:input_type -> lock.AcquireReq
	2,  // 7: lock.LockService.Release:input_type -> lock.ReleaseReq
	4,  // 8: lock.LockService.Renew:input_type -> lock.RenewReq
	1,  // 9: lock.LockService.Acquire:output_type -> lock.AcquireResp
	3,  // 10: lock.LockService.Release:output_type -> lock.ReleaseResp
	5,  // 11: lock.LockService.Renew:output_type -> lock.RenewResp
	9,  // [9:12] is the sub-list for method output_type
	6,  // [6:9] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_internal_proto_lock_proto_init() }
func file_internal_proto_lock_proto_init() {
	if File_internal_proto_lock_proto != nil {
		return
	}
	file_internal_proto_lock_proto_msgTypes[10].OneofWrappers = []any{
		(*RaftCommand_LeaderChangeConf)(nil),
		(*RaftCommand_Acquire)(nil),
		(*RaftCommand_Release)(nil),
		(*RaftCommand_Renew)(nil),
	}
	file_internal_proto_lock_proto_msgTypes[13].OneofWrappers = []any{
		(*SnapshotItem_LeaderConf)(nil),
		(*SnapshotItem_Lock)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_internal_proto_lock_proto_rawDesc), len(file_internal_proto_lock_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_internal_proto_lock_proto_goTypes,
		DependencyIndexes: file_internal_proto_lock_proto_depIdxs,
		MessageInfos:      file_internal_proto_lock_proto_msgTypes,
	}.Build()
	File_internal_proto_lock_proto = out.File
	file_internal_proto_lock_proto_goTypes = nil
	file_internal_proto_lock_proto_depIdxs = nil
}
